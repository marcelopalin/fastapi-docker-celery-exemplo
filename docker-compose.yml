version: '3.9'

# Não esqueça de criar a rede: docker network create web
networks:
  web:
    external: true

services:

  # (01) - TRAEFIK - PROXY
  traefik:
    image: traefik:v2.3
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    restart: always
    ports:
      - "80:80"
      - "8080:8080" # Interface do Traefik (enabled by --api)
    networks:
      - web
    volumes:
      # Traefik passa a controlar os containers do Docker
      - /var/run/docker.sock:/var/run/docker.sock

  # (02) - REDIS - BROKER
  redis:
    container_name: "redis"
    image: redis:6-alpine
    ports:
      - '6379:6379'
    networks:
      - web
    # Here we define our settings for traefik how to proxy our service.
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=false"

  # (03) - RABBITMQ - BROKER
  rabbitmq:
    container_name: "rabbitmq"
    image: bitnami/rabbitmq:3.8.27
    ports:
      - 5672:5672
    networks:
      - web
    # Here we define our settings for traefik how to proxy our service.
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=false"

  # (04) - BD - POSTGRES
  postgres:
    container_name: postgres
    restart: always
    image: postgres:13.1
    env_file:
      - .env # path to .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ~/.docker/database/dump_clima_passado:/home/ubuntu/proj-celery-exemplo/db_backup
      - ~/.docker/database/clima_passado_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - web
    # Here we define our settings for traefik how to proxy our service.
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=false"

  # (05) - BD - PGADMIN
  pgadmin4:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: unless-stopped
    env_file:
      - .env # path to .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "16543:80"
    networks:
      - web
    # Here we define our settings for traefik how to proxy our service.
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=true"
      # Here we have to define the URL
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`)"
      # Here we are defining wich entrypoint should be used by clients to access this service
      - "traefik.http.routers.pgadmin.entrypoints=web"
      # Here we define in wich network treafik can find this service
      - "traefik.docker.network=web"
      # This is the port that traefik should proxy
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"

  # (06) - BACKEND FASTAPI
  application:
    container_name: proj-celery-exemplo-backend # Fixa o nome da imagem gerada
    image: proj-celery-exemplo-backend:${TAG_IMAGE} # adiciona a versão da Imagem
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    # user: ${UID} # set a specific user id so the container can write in the data dir
    command: uvicorn main:app --reload --workers 1 --host 0.0.0.0 --port 8000
    ports:
      - 8000:8000
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - web
    # Here we define our settings for traefik how to proxy our service.
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=true"
      # Here we have to define the URL
      - "traefik.http.routers.backend.rule=Host(`backend.localhost`)"
      # Here we are defining wich entrypoint should be used by clients to access this service
      - "traefik.http.routers.backend.entrypoints=web"
      # Here we define in wich network treafik can find this service
      - "traefik.docker.network=web"
      # This is the port that traefik should proxy
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    volumes:
      - ./app/static:/home/ubuntu/proj-celery-exemplo/app/static
      - ./Saida:/home/ubuntu/proj-celery-exemplo/Saida
      - ./logs:/home/ubuntu/proj-celery-exemplo/logs
    restart: always
    depends_on:
      - redis
      - postgres

  # (07) - PRODUCER - CELERY TASKS
  producer:
    container_name: producer
    user: ${UID} # set a specific user id so the container can write in the data dir
    image: proj-celery-exemplo-backend:${TAG_IMAGE}
    command: celery -A app.workers.operacoes_matematicas worker --loglevel=info --logfile=logs/worker1.log
    ports:
      - 8001:8000
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - C_FORCE_ROOT=true
    networks:
      - web
    # Here we define our settings for traefik how to proxy our service.
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=false"
    volumes:
      - ./logs:/home/ubuntu/proj-celery-exemplo/logs
    restart: always
    depends_on:
      - redis
      - postgres
      - application

  # (08) - FLOWER - CELERY
  flower:
    container_name: flower
    image: proj-celery-exemplo-backend:${TAG_IMAGE}
    command: celery -A app.workers.operacoes_matematicas flower --port=5555 --broker=redis://redis:6379/0
    ports:
      - 5555:5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - web
    # Here we define our settings for traefik how to proxy our service.
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=true"
      # Here we have to define the URL
      - "traefik.http.routers.flower.rule=Host(`flower.localhost`)"
      # Here we are defining wich entrypoint should be used by clients to access this service
      - "traefik.http.routers.flower.entrypoints=web"
      # Here we define in wich network treafik can find this service
      - "traefik.docker.network=web"
      # This is the port that traefik should proxy
      - "traefik.http.services.flower.loadbalancer.server.port=5555"
    volumes:
      - ./logs:/home/ubuntu/proj-celery-exemplo/logs
    restart: always
    depends_on:
      - redis
      - postgres
      - application

  # (09) - FRONTEND - HTML CSS JS - SIMPLES
  frontend:
    image: nginx
    networks:
      - web
    # Here we define our settings for traefik how to proxy our service.
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=true"
      # Here we have to define the URL
      - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
      # Here we are defining wich entrypoint should be used by clients to access this service
      - "traefik.http.routers.frontend.entrypoints=web"
      # Here we define in wich network treafik can find this service
      - "traefik.docker.network=web"
      # This is the port that traefik should proxy
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    volumes:
      - ./frontend/html:/usr/share/nginx/html
    restart: always
    depends_on:
      - application
